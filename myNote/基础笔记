对字符串的操作
var str = "women,people,test,hahha:shing,moment";

1、字符串分割： split()
				-----------该方法中存在两个参数，第一个为分割符，第二个为字符串最大长度
				split(",",9)
2、查询子字符串：indexOf()/lastIndexOf()
				-----------从字符串的开头开始查找，找到返回对应坐标，找不到返回-1
				var ind = str.indexOf("men,");

3、字符串替换：  replace()
				-------默认只替换第一次查到的，想要全局替换的话需要用到全局标志
			//替换操作
		    var rep = str.replace("men","MEN");
		    //全局替换
		    var rep1 = str.replace(/men/g,"MEN")

4、查找给定位置的字符： charAt()
					--------
					//charAt()
                    var char = str.charAt(5);

5、字符串连接： concat()
			-------相当于str + 连接的字符
			--------women,people,test,hahha:shing,moment::::hahha
			var conc = str.concat("::::hahha");
6、字符串切割： slice()


通过字符串来截取字段，如果字符串最后一个字符为符号的话---存在问题获取到的数组将会得到一个空字段的数据。。那么该怎么忽略掉最后一个符号？
例如：var data = "我们:你好;他们:再见;联系电话:1234567-7898;";

一个字符串中既有分号也有冒号，通过符号截取函数split()来截取。。。
    ------对于该问题我想到的解决方案是先将某个字符通过replace()替换为相同的字符，如果存在多个的话就全局替换
    var data = "我们:你好;他们:再见;联系电话:1234567-7898";
    var daaRp =  data.replace(/:/g,";");
    -------最后对剩余的那个字符进行截取
    var daa = daaRp.split(";");


-------JSON.stringify()
-------将数据值转换为json字符串


vue框架的学习以及项目的实现。。。直接用所学技术知识用到在journey项目上。。journey项目的重新构造。。定位功能保留


sass使用$来定义变量
$line: 21px;
$attr: border;

#{}-----可以在选择器或者属性名中使用变量
div.#{$attr}: 20px red;-------div.border : 20px red;
p {
    line-height: #{$line}-----line-height: 21px;
}

@import   -----允许导入其他路径的sass文件。。只有在改文件名后缀为.sass时才能导入成功，否则就作为普通的css语句


如果需要导入scss或者sass文件，但是不希望将其编译为css，只需要在文件名前添加下划线

@extend   
		-----将重复的样式延伸给需要包含给这个样式的特殊样式


想解决的问题：
------
journey项目中的图片条功能的改进homepage.html文件navi6下
怎么使用vue.js来绑定图片的路径，使用v-for 来显示图片。。需要注意的是显示的图片是有限的，要想显示其他的图片可以通过点击更多按钮来查看



css中的单位vh和vw指的是：
vh-----viewport  height -----视窗宽度   1vh==1%的视窗高度
vw-----viewport  width ------视窗高度   1vw==1%的视窗宽度


javascript的选择器

子选择器
E1>E2{}
子对象选择器--第N个元素
选择器：first-child{}

选择器：nth-child(n)
	  p:nth-child(n)----匹配器父元素下的第n个p -----(下标从1开始)
	  p:nth-child(odd)----奇数p-----(下标从1开始)
	  p:nth-child(even)---偶数p

	  p:nth-of-type(n)------选择器匹配属于父元素的特定类型的第N个子元素的每个元素

vue中的特殊属性   :key的使用

2018/6/25   周一
ES6新增的箭头函数： =>
        x => x*x; 相当于  function(x){return x*x;}
        箭头函数相当于匿名函数，并且可以省略掉{...}和return..当然，存在多条语句时就不可以省略了
        箭头函数和匿名函数存在的区别在与this关键字的作用域。。箭头函数是语法作用域，由上下文确定。。
        箭头函数的this实在定义函数是进行绑定，而不是执行的时候进行绑定的。。


2018/6/26  周二
javascript正则表达式


    正则表达式的创建有两种方式：
            字面量：var pattern = / pattern / flag;
            字符串：var pattren1 = new RegExp(pattern,flag);

    模板
           var pattern = / pattern / flag;
           var str = "moment,comment,test,pest,just,command";
           var arr = pattern.exec(str);
           var b = pattern.text(str);

    flag关键字主要有(可以同时存在多个)
            i(ignoreCase)------忽略大小写
            g(globle)------全局搜索
            m(multiline)----多行搜索
            l(lastIndex)----下一个匹配项的开始位置，从0开始
            s(source)-----正则表达式的字符串表达

    匹配的方法主要有
            test()------用于检测一个字符串是否匹配某个模式，如果存在，则返回true;否则，返回false
            exec()------用于检索字符串中的正则表达式的匹配。该函数返回一个数组。。如果没有，则返回null

            tolocalString()、toString()------将字面量转换成字符串格式
            valueOf()------返回字面量格式

    表达式模式
           方括号 []-----用于匹配某个范围内的字符
                    -----[abc]括号内的任意一个字符
                    -----[0-9]0-9的任意一个字符
                    -----[^bc]非bc
                    -----[a-z && [^bc]]----除bc外的a-z的字符

           量词
                n+------一个或多个（至少一个）
                n*------0个或多个(任意个)
                n?------0个或一个（至多一个）

           静态属性
                $_
                $*

            RegExp的方法：
                match()
                split()


VUE的生命周期钩子

|--beforecreate
|---------------在这个生命周期内,进行初始化时间，进行数据的监测。在created的时候数据已经和data属性进行了绑定
|---------------此时没有进行DOM的挂载
|--create
|---------------在这个生命周期的过程中，首先会判断是否有el选项，如果有，则往下编译。其中el就是挂载的dom节点
|---------------如果没有，则直到vue实例调用vm.$mount(el)，否则生命周期将停止。。
|---------------接下来看是否有template选项，如果有，就将template作为一个模板编译成一个render函数；
|---------------如果没有，就将el的外部html内容作为一个template。。。。可见，template的优先级较高
|===============在vue中还有一个render函数，以createElement作为参数，然后做渲染操作
|--beforeMount
|---------------vue实例对象添加$el成员，并且替换掉挂载在的DOM对象.这时候只是用{{message}}、{{data}}来进行占位，并没有替换成相应的数据
|--Mount
|---------------这个生命周期里，将{{message}}、{{data}}替换成相应的渲染数据
|--beforeUpdate
|--Update
|--beforeDestroy
|--Destroy
|---------------在调用vm.$destroy()之后，实例被销毁，但是dom和属性方法等还依旧存在，只是改变他们讲不会生效。。


父子组件的生命周期(暂时不做深入了解，等有进一步学习以后再仔细研究)
        参考网址：  https://segmentfault.com/a/1190000014705819
        1、仅当子组件完成挂载后，父组件才会挂载
        2、当子组件完成挂载后，父组件会主动执行一次beforeUpdate/update钩子函数（仅首次）
        3、父子组件在data变化时是分别监控的，但是在更新prop中的数据是关联的
        4、销毁父组件时，先将子组件销毁后才会销毁父组件

兄弟组件之间的生命周期
       1、初始化销毁等互相不干扰。
       2、挂载是从上到下依次进行的。


vue指令
        v-model指令： 实现表单输入与应用状态之间的双向绑定
        v-on

自定义指令
        有时候我们需要实现现有指令无法实现的功能，这时我们就可以通过自定义指令来实现功能
        全局注册
                //注册一个全局自定义指令， 'v-focus'
                Vue.directive('focus',{
                //当被绑定的元素插入到DOM 中时
                inserted: function(el){
                //聚焦元素
                    el.focus()
                }
                })
        局部注册
            如果想注册局部指令，组件中也接受一个directives的选项
            directives: {
                focus: {
                    //指令的定义
                    inserted: function(el) {
                        el.focus()
                    }
                }
            }
        之后，就可以在模板的任何元素上使用新的v-focus指令
        <input v-focus />

    指令钩子函数：
        bind
        inserted
        update
        componentUpdated
        unbind
    钩子函数参数
    message: "hello"
        el-----------指令所绑定的元素，可以直接操作DOM
        binding------一个对象，包含下面几个属性
            name---------指令名，不包括"v-"前缀
            value--------指令的绑定值.....hello
            oldValue
            expression------指令的绑定字符串.....message
            arg-------------传给指令的参数
            modifiers-------一个包含修饰符的对象
        vnode--------vue编译生成的虚拟节点
        oldVnode-----上一个虚拟节点，仅在update和componentUpdate钩子中使用

                Vue.directive('color-swatch', function (el, binding) {
                  el.style.backgroundColor = binding.value
                })


组件传值

这里有关网址： https://blog.csdn.net/qq_35430000/article/details/79291287
    父子组件之间的传值主要为prop、event
    组件之间传值的方式有

        1、通过路由待参数进行传值
        2、通过sessionStorage缓存的形式 来进行数据传递
        3、父组件像子组件传值： props
        4、子组件像父组件传值： emit



|-------bootstrap js框架的特点
|
|
|-------jquery js框架的特点




