2018/8/15
关于基本类型与引用类型的差别
基本类型的复制是值的复制即副本，值保存在栈中
引用类型的复制其实是指针的复制，值保存在堆中
typeof用于判断属于那种类型
instanceof用于判断属于对象中的哪种引用类型

在这里我要对堆和栈的区别做个简单描述：
堆中存放的是对象，引用类型的数据，通过指针来获取堆中的数据
栈中存在的是简单的变量



javascript中的对象的简单操作，包括定义、属性获取、增加修改删除属性、判断对象中是否存在某个属性：
    <script>
            //对象的定义方式之一
            //之二： var obj  =new Object()
            var obj = {
                name: 'tan',
                age: 20
            };
            obj.sex = "girl";        //添加过去对象属性的方式一
            var prom = "new";
            obj["prom"] = "newDay";  //以此形式来获取修改对象的值二
            console.log(obj.valueOf());
            //通过上述方法可以枚举到对象的所有属性和值
            for(var prop in obj){
                console.log("Name is:"+prop+"--Value is:"+ obj[prop]);
            }
            //判断对象中是否存在某个属性
            var hasSex = "sex" in obj;
            console.log(hasSex); //true
            delete obj.sex;    //删除对象的属性
            console.log(obj.valueOf());
            var hasSex1 = "sex" in obj;
            console.log(hasSex1);   //false
        </script>


 数组的方法
 concat(),可接受一个或多个数组，并按照先后顺序添加到原来数组的副本中，对原数组没影响
 slice(起始位，终止位)  ，创建一个新数组，由起始位到终止位前一个之间的数据组成
 转换成字符串的方法：
 toString()      //返回的是一个以都好分割的字符串
 toLocalString()
 valueOf()     //返回的是一个数组
 join()     //接受一个参数，返回以参数作为分隔符的字符串
 基本方法：
 push()
 pop()
 shift()
 unshift()
 reverse()  ,反转数组
 sort()，对数组进行重排序，缺点是对每一项调用toString()方法，所以数值的话得到的结果不一定理想
 操作方法：
 indexOf(某个值)，如果存在该值返回1，否则-1  （ES5新增）
 lastIndexOf()
 splice(起始位，删除的位数，插入或替换的数),可以实现的作用有删除、插入、替换；
迭代方法：（ES5新增）
传入这些方法中的函数都接受三个参数，item--数组项的值；index----索引；array---数组本身
every(function(item,index,array){})   ,返回boolean
some()    ,返回boolean
filter()  ,返回数组
map()     ,返回数组
forEach() ,返回数组
归并
传入这些方法中的函数接受四个参数：pre---前一项；cur---后一项；index---索引；array---数组本身；
执行后的返回值会作为pre值继续执行操作
reduce()   ，返回最后值
reduceRight()


判断一个对象是不是数组
我们知道，在javascript中，数据的基本类型主要分为六类(五类基本类型，一个引用类型)：
String、Boolean、Number、undefined、null、object(引用类型)
而我们常用的数组Array就属于对象的一种，那么如何判断该对象就是数组呢？
很明显，如果我们使用arr.typeof()会返回object，所以我们应该使用var a = arr instanceof Array;
除此之外，ES5还新增了一个方法：
Array.isArray()





当javascript引擎解析脚本时，他会在预编译期对所有声明的变量进行处理：

处理如下：
1、在执行前后会进行预编译的操作

javascript的操作符

ECMAscript会尽力向我们隐藏一些信息，换句话说，在以二进制字符串形式输出一个负数时，我们看到的只是这个负数绝对值
的二进制码前面加了一个符号。比如-18  （-10010）

<<  左移         以0来填充空位。因为符号位在左边，所以左移时不会对符号位产生影响，因此包括符号位都向左移。
>>  有符号右移   以符号位的值来填充空位。符号位保留，右移时空位将出现在符号位与右侧
>>> 无符号后移   以0填充空位。此时负数的话将以其 绝对值的形式来右移。
逻辑非操作符 ！
同时使用两个逻辑非 ：!!操作相当于Boolean()函数效果

一个逻辑与&&
逻辑与操作属于短路运算
逻辑与操作可以应用于任何类型的操作数，而不仅仅是布尔值。在有一个操作数不是布尔值的情况下就不一定返回布尔值了。
如果第一个操作数是对象，则返回第二个操作数
如果第二个操作数是对象，则只有在第一个操作数的求职结果为true的情况下才会返回该对象
如果两个操作数都是对象，则返回第二个操作数
如果第一个操作数是Null，则返回Null
如果第一个操作数是undefined，则返回undefined

逻辑或||
逻辑或操作也属于短路操作符
如果第一个操作数是对象，则返回第一个操作数
如果第一个操作数的求值结果为false，则返回第二个操作数
如果两个数都是对象，则返回第一个操作数
如果两个操作数都是Null,则返回null
如果两个操作数都是NaN,则返回NaN
如果两个操作数都是undefined，则返回undefined

乘性操作符： 乘法、除法、求模
与java、c等语言的唯一区别在于--在操作数为非数值的情况下会执行自动的类型转换，即使用Number()转型函数。
如果乘积超过了ECMAscript数值的表示范围，则返回Infinity或者-Infinity
如果有一个操作数是NaN，则结果是NaN
如果是Infinity与0相乘，则结果是NaN
如果是Infinity与非0相乘，则结果是Infinity或者-Infinity，取决于有符号操作数的符号
如果是Infinity与infinity相乘，结果是Infinity
如果有一个操作数不是数值，则在后台调用Number()将其转换为数值，在应用上面的规则

除法 /
0被0除，结果是NaN
如果是Infinity被Infinity除，结果是NAN
如果是非0的有限数被0除，其结果是 Infinity或者-Infinity

加性操作符 +、-
加法减法操作符的特殊情况：
如果有一个操作数是NaN，则结果是NaN
Infinity加-Infinity = NaN
Infinity减Infinity = NaN
-Infinity减-Infinity = NaN
.......针对  +
如果有一个操作数是字符串，就要应用如下规则
两个都是字符串，那么第二个操作数与第一个操作数拼接起来
只有一个是字符串，则将另一个转换为字符串，在进行拼接
如果有一个操作数是对象，数值或者布尔值，则调用他们的toString()方法取得相应的字符串，再进行相应处理
undefined.toString()----'undefined'
null.toString()----'null'

......针对  -
如果有一个操作数是字符串、布尔值、null、undefined，则在后台调用Number()函数将其转换为数值，然后在根据前面的规则
执行减法操作，如果转换的结果是NaN，则结果是NaN
如果有一个操作数是对象，则调用对象的valueOf()方法取得表示该对象的数值，如果对象没有valueOf()方法，则调用其toString()
方法并将得到的字符串转换为数值

相等操作符
相等和不相等----先转换再比较
全等和不全等---仅比较不转换

如果有一个操作数是布尔值，则在比较之前相等